#!/usr/bin/env python

# Import DroneKit-Python
from dronekit import connect, VehicleMode, time, LocationGlobalRelative
from dronekit_sitl import SITL

#Setup option parsing to get connection string
import argparse
parser = argparse.ArgumentParser(description='Print out vehicle state information')
parser.add_argument('--connect',help="vehicle connection target string.")
args=parser.parse_args()

connection_string = args.connect

### FOR TESTING
# sitl = None

# if not connection_string:
#     sitl_defaults = '~/git/ardupilot/tools/autotest/default_params/copter.parm'
#     sitl = SITL()
#     sitl.download('copter', '3.3', verbose=True)
#     sitl_args = ['-I0', '--model', 'quad', '--home=41.714841,-86.241941,0,180']
#     sitl.launch(sitl_args, await_ready=True, restart=True)
#     connection_string = 'tcp:127.0.0.1:5760'
###


# Connect to the Vehicle.
print("\nConnecting to vehicle on: %s" % connection_string)
vehicle = connect(connection_string, wait_ready=False)
vehicle.wait_ready(timeout=120)

#Get some vehicle attributes (state)
print("Get some vehicle attribute values:")
print("GPS: %s" % vehicle.gps_0)
print("Battery: %s" % vehicle.battery)
print("Last Heartbeat: %s" % vehicle.last_heartbeat)
print("Is Armable?: %s" % vehicle.system_status.state)
print("Mode: %s" % vehicle.mode.name) # settable

def arm_and_takeoff(aTargetAltitude):
    """
    Arms vehicle and fly to aTargetAltitude.
    """

    print("Basic pre-arm checks")

    #while not vehicle.is_armable:
    #    print(" Waiting for vehicle to initialise...")
    #    time.sleep(3)
    #    print("Arming motors")
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True

    #while not vehicle.armed:
    #    print(" Waiting for arming...")
    #    time.sleep(1)

    print("Vehicle armed!")
    print("Taking off!")

    vehicle.simple_takeoff(aTargetAltitude)  # Take off to target altitude
    lat = vehicle.location.global_relative_frame.lat
    lon = vehicle.location.global_relative_frame.lon
    alt = vehicle.location.global_relative_frame.alt
    print('Current location after takeoff is: {0},{1},{2}'.format(lat,lon,alt))

    # Wait until the vehicle reaches a safe height before processing the goto
    #  (otherwise the command after Vehicle.simple_takeoff will execute immediately).
    while True:
        print("Altitude: " + str(vehicle.location.global_relative_frame.alt))
        # Break and return from function just below target altitude.
        if vehicle.location.global_relative_frame.alt >= aTargetAltitude * 0.95:
            print("Reached target altitude")
            break
        time.sleep(1)

arm_and_takeoff(10)

####################################
# YOUR CODE GOES HERE
####################################

# Check that you are using proper GOTO commands that are
# executed in a loop with the following logic:
#def my_goto_function(target):
#    print the target coordinates so we know what is happening
#    simple goto command
#    while loop must include while vehicle.mode="GUIDED"
#        check distance to target
#        if close to target
#            break 
#
# You can call your function for each waypoint
# SANITY CHECK that you don't go farther than 20 meters from your starting waypoint.
# I'm somehow against anyone trying to fly to Australia during our flight tests!

import math
import time

R = 6371 * 1000 # radius of earth in meters

# FUNCTIONS
# Function: get distance in meters
def get_distance_meters(loc1, loc2):
    lat1 = math.radians(loc1.lat)
    lon1 = math.radians(loc1.lon)
    lat2 = math.radians(loc2.lat)
    lon2 = math.radians(loc2.lon)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = (
        math.sin(dlat / 2) ** 2
    ) + math.cos(lat1) * math.cos(lat2) * (
        math.sin(dlon / 2) ** 2
    )
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    return R * c

# My goto function
def my_goto(pt):
    print("Lat: " + str(
        vehicle.location.global_relative_frame.lat
    ) + ", Lon: " + str(
        vehicle.location.global_relative_frame.lon
    ) + ", Alt: " + str(
        vehicle.location.global_relative_frame.alt
    ) )

    # goto location while guided and we aren't close
    vehicle.simple_goto(pt, groundspeed=5)
    while vehicle.mode == "GUIDED" and get_distance_meters(vehicle.location.global_relative_frame, pt) > 1 and \
        get_distance_meters(vehicle.location.global_relative_frame, pt) < 25:

        time.sleep(1)
        print("Lat: " + str(
            vehicle.location.global_relative_frame.lat
        ) + ", Lon: " + str(
            vehicle.location.global_relative_frame.lon
        ) + ", Alt: " + str(
            vehicle.location.global_relative_frame.alt
        ) )

# MOVEMENT
# Create points
dlat_meters_1 = math.sqrt((20 ** 2) / 2)
dlon_meters_1 = - dlat_meters_1
dlat_meters_2 = 0
dlon_meters_2 = 10.0

# first pt is NW of takeoff location by 20m
new_lat_1 = vehicle.location.global_relative_frame.lat + (
    dlat_meters_1 / R
) * (180 / math.pi)
new_lon_1 = vehicle.location.global_relative_frame.lon + (
    dlon_meters_1 / R
) * (180 / math.pi) / math.cos(vehicle.location.global_relative_frame.lat * math.pi/180)

# second pt is E of first pt by 10m
new_lat_2 = new_lat_1 + (
    dlat_meters_2 / R
) * (180 / math.pi)
new_lon_2 = new_lon_1 + (
    dlon_meters_2 / R
) * (180 / math.pi) / math.cos(new_lat_1 * math.pi/180)

pts = [
    LocationGlobalRelative(new_lat_1, new_lon_1, 10.0),
    LocationGlobalRelative(new_lat_2, new_lon_2, 10.0)
]

# Start timer
t_s = time.localtime()
secs_s = time.time()

# Start movement
for i, pt in enumerate(pts):
    my_goto(pt)

    # mark time
    t_e = time.localtime()
    secs_e = time.time()
    secs = int(secs_e - secs_s)

    print("\nArrived at location " + str(i + 1) + "!")
    print("Total Time: " + str(secs) + " seconds.\n")


####################################
# Add this at the end
####################################

print("Returning to Launch")
vehicle.mode = VehicleMode("LAND")  # Note we replace RTL with LAND

# Close vehicle object before exiting script
print("Close vehicle object")
vehicle.close()

time.sleep(5)
print("Completed")